package com.game.src.main;

import javax.swing.JFrame;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import java.awt.*;

public class GAME implements KeyListener {
    JFrame jf;
    int WIDTH = 500;
    int HEIGHT = 500;
    JPanel panel;
    JLabel jet;
    JLabel opponentJet;
    Image myjet,oppjet;
    ArrayList<Rectangle> bullets;
    boolean movingRight = true;
    boolean started, gameover;
    Random rand;
    int score;
    int speed;
    int bulletTimer;
    int bulletspeed;
    int passedbullets;
    boolean cheat;
    Clip clip;
    
    public GAME() {
        started = false;
        gameover = false;
        score = 0;
        speed = 5;
        bulletTimer = 0;
        bulletspeed = 15;
        passedbullets=0;
        cheat=false;
        playSound("C:\\Users\\HP\\Downloads\\cinematic-intro-6097 (online-audio-converter.com) (1).wav");
        
        jf = new JFrame("GAME");
        jf.setSize(WIDTH, HEIGHT);
        jf.setLayout(null);
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.addKeyListener(this);

        bullets = new ArrayList<>();


        ImageIcon jetImage = new ImageIcon("C:\\Users\\HP\\Downloads\\JET1 (2).png"); // Replace with your image path
        jet = new JLabel(jetImage);
        jet.setBounds(250, 380,30, 40);
        
        ImageIcon oppjetImage= new ImageIcon("C:\\Users\\HP\\Downloads\\jet2 (3) (3).png"); // Replace with your image path
        opponentJet = new JLabel(oppjetImage);
        opponentJet.setBounds(250, 140,50, 60);
        
        
        
        panel = new Renderer();
        panel.setBounds(0, 0, WIDTH, HEIGHT);
        panel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!started) {
                    started = true;
                    gameover = false;
                    score = 0;
                    clip.stop();
                    clip.close();
            		playSound("C:\\Users\\HP\\Downloads\\shooting.wav");
                    
                }
            }
        });

       
        jf.add(jet);
        jf.add(opponentJet);
        jf.add(panel);
        jf.setComponentZOrder(jet, 0);
        jf.setComponentZOrder(opponentJet, 0);
        jf.setComponentZOrder(panel, 2);
        jf.setVisible(true);

        Timer timer = new Timer(50, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                moveOpponentJet();
                if (bulletTimer == 0) {
                    generateBullet();
                }
                moveBullets();
                checkCollisions(); // Check collisions after moving bullets
                panel.repaint();
                if(score >= 5&&score<=10) {
                	bulletspeed=13;
                }
                if(score >= 10&&score<=15) {
                	bulletspeed=11;
                }
                if(score >= 15&&score<=20) {
                	bulletspeed=9;
                }
                bulletTimer = (bulletTimer + 1) % bulletspeed;
            }
        });
       
        timer.start();
    }

    public class Renderer extends JPanel {
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            g.setColor(Color.BLUE);
            g.fillRect(0, 0, 500, 500);

            g.setColor(Color.BLACK);
            g.fillRect(100, 100, 300, 300);
            
           
            g.setColor(Color.YELLOW);
            for (Rectangle bullet : bullets) {
                paintBullet(g, bullet);
            }

            g.setColor(Color.YELLOW);
            g.setFont(new Font("Display", Font.BOLD, 50));
            g.drawString("SPACE", 160, 40);
            g.setColor(Color.WHITE);
            g.setFont(new Font("Ariel", Font.BOLD, 40));
            g.drawString("JET", 210, 70);
                
            
           
           
            if (!started&&!gameover) {
            
            	
                g.setColor(Color.YELLOW);
                g.setFont(new Font("Ariel", Font.BOLD, 20));
                g.drawString("Click anywhere to Play!", 140, 250);
                
            }
            
            if(started ) {
            	g.setFont(new Font("Ariel", Font.BOLD, 20));
            	g.drawString("Score: "+score, 100, 100);
            	
            	
            }
            if (gameover) {
            	 g.setColor(Color.YELLOW);
            	g.setFont(new Font("Ariel", Font.BOLD, 20));
            	 g.drawString("Click again to RETRY", 150, 300);
            	 g.drawString("Your Score: "+ score,170,220);
            	 g.setFont(new Font("Ariel", Font.BOLD, 30));
                g.drawString("Game Over!", 170,250);
                stopSound();
               
                
               
            }
        }
    }

    private void paintBullet(Graphics g, Rectangle bullet) {
        g.setColor(Color.YELLOW);
        g.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
    }

    public static void main(String[] args) {
    	        EventQueue.invokeLater(new Runnable() {
    	            public void run() {
    	                new GAME();
    	            }
    	        });
    }

    @Override
    public void keyTyped(KeyEvent e) {
        moveJet(e.getKeyChar());
    }

    @Override
    public void keyPressed(KeyEvent e) {
        moveJet(e.getKeyCode());
    }

    private void moveJet(char keyChar) {
        int x = jet.getX();
        int y = jet.getY();
        speed = 5;

        switch (keyChar) {
            case 'a':
                if (x - speed >= 110) {
                    jet.setLocation(x - speed, y);
                }
                break;
            case 'd':
                if (x + speed <= 375) {
                    jet.setLocation(x + speed, y);
                }
                break;
        }
    }

    private void moveJet(int keyCode) {
        int x = jet.getX();
        int y = jet.getY();
        int speed = 5;
        
        if(keyCode==73) {
        	cheat=true;
        }
        if(keyCode==82) {
        	cheat=false;
        }
       
        switch (keyCode) {
            case KeyEvent.VK_LEFT:
                if (x - speed >= 110) {
                    jet.setLocation(x - speed, y);
                }
                break;
            case KeyEvent.VK_RIGHT:
                if (x + speed <= 375) {
                    jet.setLocation(x + speed, y);
                }
                break;
        }
    }

    private void moveOpponentJet(){
        int x = opponentJet.getX();
        speed = 5;
        if(score >= 5&&score<=10) {
        	speed=6;
        }
        if(score >= 10&&score<=15) {
        	speed=7;
        }
        if(score >= 15&&score<=20) {
        	speed=8;
        }
        if(score >= 20&&score<=25) {
        	speed=6;
        }
        if(score >= 25&&score<=20) {
        	speed=5;
        }
       
        	if (started) {
        if (movingRight) {
            if (x + speed <= 375) {
                opponentJet.setLocation(x + speed, opponentJet.getY());
            } else {
                movingRight = false;
            }
        } else {
            if (x - speed >= 110) {
                opponentJet.setLocation(x - speed, opponentJet.getY());
            } else {
                movingRight = true;
            }
        }
    }
    }
   

    private void generateBullet() {
        if (started) {
            int bulletX = opponentJet.getX() - 10 + opponentJet.getWidth() / 2 - 2;
            int bulletY = opponentJet.getY() - 40 + opponentJet.getHeight();
            bullets.add(new Rectangle(bulletX, bulletY, 5, 10));
        }
    }

    private void moveBullets() {
        Iterator<Rectangle> iterator = bullets.iterator();
        while (iterator.hasNext()) {
            Rectangle bullet = iterator.next();
            bullet.y += speed;
            if (bullet.y > 390) {
                iterator.remove();
                // Increment passed bullets counter
                passedbullets++;
                // Check if passed 3 bullets, then increase score
                if (passedbullets >= 3) {
                    score++;
                    passedbullets = 0; // Reset counter
                }
            }
        }
    }

    private void checkCollisions() {
    	if(!cheat) {
    	
        Rectangle jetBounds = new Rectangle(jet.getX(), jet.getY()-15, jet.getWidth(), jet.getHeight());
        
        for (Rectangle bullet : bullets) {
            if (bullet.intersects(jetBounds)) {
                gameover = true;
                bullets.clear();
                started=false;
                return;
            }
            panel.repaint();
        }
    }
    }
    public void playSound(String fileName) {
		try {
			AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(fileName).getAbsoluteFile());
			clip = AudioSystem.getClip();
			clip.open(audioInputStream);
			
			clip.loop(Clip.LOOP_CONTINUOUSLY);
			
			clip.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    public void stopSound() {
        if (clip != null && clip.isRunning()) {
            clip.stop();
        }
    }
    @Override
    public void keyReleased(KeyEvent e) {
       
    }
}
